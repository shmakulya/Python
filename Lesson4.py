# 1) Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной
# платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах*ставка в
# час) + премия. Для выполнения расчета для конкретных значений необходимо запускать
# скрипт с параметрами.


# 2) + Представлен список чисел. Необходимо вывести элементы исходного списка, значения
# которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для
# формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new = [i for el, i in enumerate(my_list) if my_list[el] > my_list[el-1] and el != 0]
print(new)

# 3) + Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить
# задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print([el for el in range(20,240) if el % 20 == 0])

print([el_1 for el_1 in range(20,240) if el_1 % 21 == 0])

# 4) + Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в
# порядке их следования в исходном списке. Для выполнения задания обязательно
# использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

numbers = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new = [x for x in numbers if numbers.count(x) == 1]
print(new)

# 5) + Реализовать формирование списка, используя функцию r ange() и возможности генератора. В
# список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить
# результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce() .

from functools import reduce


def my_list(n1, n2):
    return n1 * n2

new20 = [el for el in range(100, 1001) if el %2 == 0]
print(new20)

# 6) + Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля i tertools. Обратите внимание, что
# создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его
# завершения. Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10
# завершаем цикл. Во втором также необходимо предусмотреть условие, при котором
# повторение элементов списка будет прекращено.

from itertools import count, cycle
#
# a)
for el in count(3):
    print(el)
    if el > 9:
        break

# b)
c = 0
for el in cycle(['one', 'two', 'three']):
    if c > 8:
        break
    print(el)
    c += 1

# 7) + Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное
# значение. При вызове функции должен создаваться объект-генератор. Функция должна
# вызываться следующим образом: f or el in fact(n). Функция отвечает за получение факториала
# числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал
# четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial
from itertools import count

def generator():
    for el in count(1):
        yield factorial(el)

x = 0
for i in generator():
    count
    print('Factorial {} - {}'.format(x+1, i))
    if x == 8:
        break
    x += 1

